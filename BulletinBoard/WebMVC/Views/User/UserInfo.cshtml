@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer Localizer
@model UserInfoViewModel

@{
    ViewData["Title"] = @Localizer["pageTitle"];
}

<h1 class="page-header" align="center">@Localizer["pageHeader"] @Model.FIO</h1>
@Html.Partial("_UserErrors")

<form action="/User/UserInfo" method="post" class="sign-up-form">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <input asp-for="Id" type="text" name="Id" value="@Model.Id" readonly hidden>
    <div class="sign-up-form-user-name">
        <label for="advert-form-title-input" class="sign-up-form-user-name-lable">@Localizer["userName"]</label>
        @if (Model != null)
        {
            <input type="text" name="FIO" id="sign-up-form-user-name-input" value="@Model.FIO" required>
            <label class="error"><span asp-validation-for="FIO"></span></label>
        }
        else
        {
            <input type="text" name="FIO" id="sign-up-form-user-name-input" value="" required>
        }
    </div>
    <div class="sign-up-form-email">
        <label for="advert-form-email-input" class="sign-up-form-email-lable">@Localizer["email"]</label>
        @if (Model != null)
        {
            <input type="email" name="Email" id="sign-up-form-email-input" value="@Model.Email" autocomplete="off" required>
            <label class="error"><span asp-validation-for="Email"></span></label>
        }
        else
        {
            <input type="email" name="Email" id="sign-up-form-email-input" value="" autocomplete="off" required>
        }
    </div>
    <div class="sign-up-form-phone">
        <label for="advert-form-email-input" class="sign-up-form-phone-lable">@Localizer["phone"]</label>
        @if (Model != null)
        {
            <input type="text" name="Phone" id="sign-up-form-phone-input" autocomplete="off" value="@Model.Phone" required>
            <label class="error"><span asp-validation-for="Phone"></span></label>
        }
        else
        {
            <input type="text" name="Phone" id="sign-up-form-phone-input" autocomplete="off" value="" required>
        }
    </div>
    <div class="sign-up-form-region">
        <label for="advert-form-region-input" class="sign-up-form-region-lable">@Localizer["region"]</label>
        <div class="sign-up-form-region-select-container">
            <select class="sign-up-form-select-region-select" name="RegionId" asp-for="RegionId">
                @foreach (var region in Model.Regions)
                {
                    if (Model.RegionId == region.Key)
                    {
                        <option value="@region.Key" selected>@region.Value</option>
                    }
                    else
                    {
                        <option value="@region.Key">@region.Value</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="sign-up-form-user-adress">
        <label for="advert-form-user-adress-input" class="sign-up-form-user-adress-lable">@Localizer["adress"]</label>
        @if (Model != null)
        {
            <input type="text" name="UserAdress" id="sign-up-form-user-adress-input" value="@Model.UserAdress" autocomplete="off" required>
            <label class="error"><span asp-validation-for="UserAdress"></span></label>
        }
        else
        {
            <input type="text" name="UserAdress" id="sign-up-form-user-adress-input" autocomplete="off" value="" required>
        }
    </div>
    <input type="submit" value="@Localizer["submit"]" id="sign-up-form-submit-button">
</form>

<script>
    $(document).ready(function () {
        //валидация формы
        var language = '@System.Globalization.CultureInfo.CurrentCulture.Name';
        $('.sign-up-form1').validate({
            rules: {
                FIO: {
                    required: true,
                    minlength: 5,
                    maxlength: 40
                },
                Email: {
                    required: true,
                    isEmailFormat: true,
                    email: false
                },
                Phone: {
                    required: true,
                    isPhoneNumberFormat: true
                },
                UserAdress: {
                    required: true,
                    minlength: 5,
                    maxlength: 180
                }
            },
            messages: {
                UserName: {
                    required: "@Localizer["requireField"]",
                    minlength: "@Localizer["userNameMinLength"]",
                    maxlength: "@Localizer["userNameMaxLength"]"
                },
                Email: {
                    required: "@Localizer["requireField"]",
                    isEmailFormat: "@Localizer["emailFormat"]"
                },
                Phone: {
                    required: "@Localizer["requireField"]",
                    isPhoneNumberFormat: "@Localizer["phoneFormat"]"
                },
                UserAdress: {
                    required: "@Localizer["requireField"]",
                    minlength: "@Localizer["userAdressMinLength"]",
                    maxlength: "@Localizer["userAdressMaxLength"]"
                }
            }
        });

        $.validator.addMethod('isPhoneNumberFormat', function (value) {
            return /^\+[0-9]{1}\([0-9]{3}\) [0-9]{3}\-[0-9]{2}\-[0-9]{2}$/.test(value);
        }, "Is not phone format");

        $.validator.addMethod('isEmailFormat', function (value) {
            return /\S+@('@')\S+\.\S+/.test(value);
        }, "Is not email format");

        $.validator.addMethod('isPasswordFormat', function (value) {
            return /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/.test(value);
        }, "Is not password format");

        $.validator.addMethod('isPasswordHasUpperCaseSymbol', function (value) {
            return /[A-Z]{1}/.test(value);
        }, "Is not password format");

        $.validator.addMethod('isPasswordHasLowerCaseSymbol', function (value) {
            return /[a-z]{1}/.test(value);
        }, "Is not password format");

        $.validator.addMethod('isPasswordHasDigit', function (value) {
            return /[0-9]{1}/.test(value);
        }, "Is not password format");

    });
</script>